import { useRouter } from "expo-router";
import { getActivePublicRoom, createRoom } from "@/mocks/api/rooms";
import { getRandomAutoRoomTitle } from "@/utils/getRandomAutoRoomTitle";

export const useJoinNow = () => {
  const router = useRouter();

  const joinNow = async ({
    hydrationReminder,
    stretchReminder,
    breathReminder,
  }: {
    hydrationReminder: boolean;
    stretchReminder: boolean;
    breathReminder: boolean;
  }) => {
    try {
      const existingRoom = await getActivePublicRoom();

      const reminderParams = {
        hydration: hydrationReminder.toString(),
        stretch: stretchReminder.toString(),
        breath: breathReminder.toString(),
      };

      if (existingRoom) {
        router.push({
          pathname: "/focus-room",
          params: {
            roomId: existingRoom.id,
            ...reminderParams,
          },
        });
      } else {
        const newRoom = await createRoom({
          title: getRandomAutoRoomTitle(),
          isPublic: true,
          isAutoGenerated: true,
          countdownStart: Date.now(),
        });

        router.push({
          pathname: "/focus-room",
          params: {
            roomId: newRoom.id,
            isNew: "true",
            ...reminderParams,
          },
        });
      }
    } catch (error) {
      console.error("Join Now failed:", error);
    }
  };

  return { joinNow };
};
